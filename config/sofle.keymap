/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define QWER 1
#define GAME 2
#define NAV 3
#define SYMB 4
#define ADJ 5
#define OLD 6

// #include <behaviors/mouse.dtsi>
/* Global settings */

#define QUICK_TAP_MS 175

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>; };

&left_encoder { steps = <60>; };

&right_encoder { steps = <60>; };

/ {
    // Activate ADJUST layer by pressing raise and lower

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        combo_GRV_Zirkumflex {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
            layers = <2 0 1 6 3>;
        };

        combo_CTRL_Z {
            bindings = <&kp LC(Y)>;
            key-positions = <37 38>;
            layers = <0 1 6 3>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
        };

        combo_copy_cut {
            bindings = <&mt LC(X) LC(C)>;
            key-positions = <38 39>;
            layers = <0 1 6 3>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
        };

        combo_CTRL_V {
            bindings = <&kp LC(V)>;
            key-positions = <39 40>;
            layers = <0 1 6 3>;
            timeout-ms = <22>;
            require-prior-idle-ms = <100>;
        };

        combo_clipboard {
            bindings = <&kp LG(V)>;
            key-positions = <40 41>;
            layers = <0 1 6 3>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
        };

        combo_CTRL_Y {
            bindings = <&kp LC(Z)>;
            key-positions = <37 39>;
            layers = <0 1 6 3>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
        };

        combo_CTRL_Backspace {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <19 20>;
            layers = <0 1 6 3 4>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
        };

        combo_Ctrl_Delete {
            bindings = <&kp LC(DELETE)>;
            key-positions = <20 21>;
            layers = <0 1 6 3 4>;
            timeout-ms = <25>;
            require-prior-idle-ms = <100>;
        };

        combo_Printscreen {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <10 11>;
            layers = <0 1 6 3>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
        };

        combo_Guillemets_open {
            bindings = <&macro_Guillemets_open>;
            key-positions = <1 2>;
            layers = <0 1>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
        };

        combo_Guillemets_close {
            bindings = <&macro_Guillemets_close>;
            key-positions = <2 3>;
            layers = <1 0>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
        };

        combo_Numword {
            bindings = <&caps_word>;
            key-positions = <24 35>;
            layers = <0 1>;
        };

        combo_en_dash2 {
            bindings = <&macro_en_dash>;
            key-positions = <48 47>;
            layers = <0 1>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
        };

        combo_question {
            bindings = <&kp LS(MINUS)>;
            key-positions = <46 47>;
            layers = <0 1 6 3>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
        };

        combo_exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <46 45>;
            layers = <0 1 6 3>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
        };

        combo_Backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <31 32>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
            layers = <0 1 6 3 4>;
        };

        combo_Listary {
            bindings = <&kp LA(SPACE)>;
            key-positions = <27 28>;
            layers = <1 0>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
        };

        combo_SelectAll {
            bindings = <&kp LC(A)>;
            key-positions = <25 26>;
            layers = <1 0 6 3>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
        };

        combo_new_window {
            bindings = <&kp LC(N)>;
            key-positions = <16 17>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_em_dash2 {
            bindings = <&macro_em_dash>;
            key-positions = <47 48 46>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_new_tab {
            bindings = <&kp LC(T)>;
            key-positions = <16 15>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_win_paste {
            bindings = <&kp LG(V)>;
            key-positions = <41 39>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <0 1 6 3>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <32 33>;
            timeout-ms = <25>;
            require-prior-idle-ms = <100>;
            layers = <0 1 6 3 4>;
        };

        combo_arrowa_right {
            bindings = <&macro_arrow_right>;
            key-positions = <48 49>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_Paste_withouta_formatting {
            bindings = <&kp LC(LS(V))>;
            key-positions = <41 39 40>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <0 1 6 3>;
        };

        combo_alt_D {
            bindings = <&kp LA(D)>;
            key-positions = <27 26>;
            timeout-ms = <25>;
            require-prior-idle-ms = <100>;
            layers = <1 0>;
        };

        combo_change_audiodevice {
            bindings = <&kp LA(LS(LC(F14)))>;
            key-positions = <5 6>;
            timeout-ms = <40>;
            layers = <0>;
        };
    };

    macros {
        macro_Guillemets_open: macro_Guillemets_open {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N1 &kp KP_N8 &kp KP_N7>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "MACRO_GUILLEMETS_OPEN";
        };

        macro_Guillemets_close: macro_Guillemets_close {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N1 &kp KP_NUMBER_7 &kp KP_N1>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "MACRO_GUILLEMETS_CLOSE";
        };

        macro_select_word: select_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp LEFT_ARROW &kp LS(RIGHT_ARROW)>,
                <&macro_release>,
                <&kp LEFT_CONTROL>;

            label = "SELECT_WORD";
        };

        macro_en_dash: macro_en_dash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_5 &kp KP_NUMBER_0>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "MACRO_EN_DASH";
        };

        macro_em_dash: macro_em_dash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_5 &kp KP_NUMBER_1>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "MACRO_EM_DASH";
        };

        macro_arrow_right: macro_arrow_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_2 &kp KP_NUMBER_6>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "MACRO_ARROW_RIGHT";
        };
    };

    behaviors {
        shml: shml {
            compatible = "zmk,behavior-hold-tap";
            label = "SHML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <18 19 6 7 8 9 10 11 23 22 21 20 30 31 32 33 34 35 45 44 46 47 48 49 59 58 57 56 55>;
            require-prior-idle-ms = <50>;
        };

        shmr: shmr {
            compatible = "zmk,behavior-hold-tap";
            label = "SHMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <54 53 52 51 50 36 37 38 39 40 41 29 4 5 16 28 27 15 3 2 14 26 25 24 12 13 0 1 17>;
            require-prior-idle-ms = <50>;
        };
    };

    sensors: sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&left_encoder &right_encoder>;
        triggers-per-rotation = <30>;
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTZ_Layer {
            display-name = "qwertz";
            bindings = <
&kp ESC         &kp N1              &kp N2    &kp N3    &kp N4  &kp N5                                         &kp N6       &kp N7  &kp N8        &kp N9      &kp N0                  &kp MINUS
&kp TAB         &kp Q               &kp W     &kp E     &kp R   &kp T                                          &mt MINUS Y  &kp U   &kp I         &kp O       &kp P                   &kp LEFT_BRACKET
&kp LEFT_SHIFT  &shml LEFT_SHIFT A  &kp S     &kp D     &kp F   &kp G                                          &kp H        &kp J   &kp K         &kp L       &shmr RIGHT_SHIFT SEMI  &shmr RIGHT_SHIFT APOS
&kp LCTRL       &shml LEFT_ALT Z    &kp X     &kp C     &kp V   &kp B      &lt 7 C_MUTE    &lt 7 C_PLAY_PAUSE  &kp N        &kp M   &kp COMMA     &kp PERIOD  &shmr LEFT_ALT SLASH    &shmr RIGHT_CONTROL LS(SLASH)
                                    &kp LGUI  &kp LALT  &mo 3   &kp SPACE  &mo 6           &lt 6 ENTER         &mo 4        &mo 3   &kp LEFT_ALT  &kp RALT
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp F21 F20>;
        };

        Siggboy_Layer {
            display-name = "siggboy";
            bindings = <
&kp ESC         &kp N1              &kp N2    &kp N3    &kp N4  &kp N5                                  &kp N6    &kp N7  &kp N8        &kp N9                      &kp N0               &kp MINUS
&kp TAB         &kp V               &kp G     &kp L     &kp P   &kp SLASH                               &kp BSPC  &kp U   &kp O         &kp COMMA                   &kp Y                &kp LEFT_BRACKET
&kp LEFT_SHIFT  &shml LEFT_SHIFT C  &kp S     &kp N     &kp T   &kp M                                   &kp K     &kp I   &kp E         &kp A                       &shmr RIGHT_SHIFT H  &shmr RIGHT_SHIFT SEMI
&kp LCTRL       &shml LEFT_ALT Q    &kp F     &kp W     &kp D   &kp B      &lt 7 C_MUTE    &lt 7 C_PP   &kp J     &kp Z   &kp SQT       &shmr RIGHT_CONTROL PERIOD  &shmr LEFT_ALT X     &shmr RIGHT_CONTROL NUBS
                                    &kp LGUI  &kp LALT  &mo 3   &kp SPACE  &mo 6           &lt 6 ENTER  &kp R     &mo 3   &kp LEFT_ALT  &kp RALT
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp F21 F20>;
        };

        Game_Layer {
            display-name = "game";
            bindings = <
&kp ESC         &kp N1     &kp N2        &kp N3    &kp N4        &kp N5                               &kp N6  &kp N7         &kp N8   &kp N9     &kp N0   &kp MINUS
&kp TAB         &kp NUBS   &kp Q         &kp W     &kp E         &kp R                                &kp T   &kp Y          &kp U    &kp I      &kp O    &kp P
&kp LEFT_SHIFT  &kp LSHFT  &kp A         &kp S     &kp D         &kp F                                &kp G   &kp H          &kp J    &kp K      &kp L    &mt RIGHT_SHIFT APOS
&kp LCTRL       &kp LCTRL  &kp Z         &kp X     &kp C         &kp V      &trans       &trans       &kp B   &kp N          &kp M    &kp COMMA  &kp DOT  &kp MINUS
                           &kp LEFT_GUI  &kp LALT  &kp LEFT_ALT  &kp SPACE  &kp SPACE    &lt 6 ENTER  &mo 3   &kp BACKSPACE  &kp DEL  &kp RALT
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp F21 F20>;
        };

        Numpad_Layer {
            display-name = "numpad";
            bindings = <
&kp ESCAPE        &kp LS(NON_US_HASH)           &kp LS(NUMBER_2)     &kp NUBS    &kp LS(NUBS)      &kp RA(MINUS)                                  &kp KP_NUMLOCK   &none            &kp KP_DIVIDE    &kp KP_MULTIPLY  &kp LS(EQUAL)                    &kp EQUAL
&kp TAB           &kp RA(Q)                     &kp RA(NUBS)         &kp RA(N8)  &kp RA(N9)        &kp LS(N7)                                     &kp LS(PERIOD)   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MINUS                     &kp NON_US_HASH
&kp LSHFT         &shml LEFT_SHIFT NON_US_HASH  &kp LS(NON_US_HASH)  &kp LS(N8)  &kp LS(N9)        &kp NUBS                                       &kp LS(COMMA)    &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &shmr RIGHT_SHIFT RIGHT_BRACKET  &kp LS(RIGHT_BRACKET)
&kp LEFT_CONTROL  &shml LEFT_ALT PERCENT        &kp LS(NUMBER_6)     &kp RA(N7)  &kp RA(NUMBER_0)  &kp RA(RIGHT_BRACKET)  &trans    &trans        &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp LS(N0)                       &trans
                                                &trans               &trans      &trans            &trans                 &trans    &kp KP_ENTER  &kp SPACE        &kp KP_NUMBER_0  &kp COMMA        &kp PERIOD
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };

        symbol_layer {
            display-name = "symbol";
            bindings = <
&kp ESCAPE        &none                          &none       &none                  &none             &none                               &none                  &none       &none       &none                &none                        &none
&kp TAB           &kp RS(NON_US_HASH)            &kp NUBS    &kp LS(NUBS)           &kp LS(NUMBER_2)  &kp LS(NUMBER_4)                    &kp LS(NUMBER_6)       &kp RA(N8)  &kp RA(N9)  &mt LS(COMMA) COMMA  &kp PERCENT                  &none
&kp LSHFT         &shml LEFT_SHIFT LS(NUMBER_1)  &kp SLASH   &kp RIGHT_BRACKET      &kp LS(N0)        &kp NON_US_HASH                     &kp RA(NUBS)           &kp LS(N8)  &kp LS(N9)  &kp LS(PERIOD)       &shmr RIGHT_SHIFT LS(MINUS)  &kp RIGHT_SHIFT
&kp LEFT_CONTROL  &kp GRAVE                      &kp LS(N7)  &kp LS(RIGHT_BRACKET)  &kp RA(MINUS)     &kp RA(Q)         &trans    &trans  &kp RA(RIGHT_BRACKET)  &kp RA(N7)  &kp RA(N0)  &kp PERIOD           &kp LS(SLASH)                &shmr RIGHT_CONTROL LS(SLASH)
                                                 &trans      &trans                 &trans            &trans            &trans    &trans  &kp SPACE              &trans      &trans      &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };

        Navigation_Layer {
            display-name = "navigation";

            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
            // |       | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
            // |       | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |       | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //                |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&kp ESCAPE    &kp F1                  &kp F2       &kp F3                  &kp F4             &kp F5                                  &kp F6     &kp F7          &kp F8              &kp F9         &kp F10       &kp F11
&kp LS(CLCK)  &kp LA(TAB)             &kp LG(TAB)  &kp LG(LC(LEFT_ARROW))  &kp LC(LG(RIGHT))  &mt C_PREV C_NEXT                       &kp PG_UP  &kp HOME        &kp UP              &kp END        &none         &kp F12
&kp CLCK      &shml LEFT_SHIFT LC(A)  &kp ESCAPE   &kp BACKSPACE           &kp DEL            &kp C_PLAY_PAUSE                        &kp PG_DN  &kp LEFT        &kp DOWN            &kp RIGHT      &none         &none
&trans        &shml LEFT_ALT LC(Y)    &kp LC(X)    &kp LC(C)               &kp LC(V)          &kp LG(V)          &trans       &trans  &kp LC(Z)  &kp LC(LEFT)    &macro_select_word  &kp LC(RIGHT)  &kp LEFT_ALT  &kp RIGHT_CONTROL
                                      &trans       &trans                  &trans             &trans             &kp ENTER    &trans  &kp SPACE  &kp C_PREVIOUS  &kp C_PLAY_PAUSE    &kp C_NEXT
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };

        Adjust_Layer {
            // ----------------------------------------------------------------------------------------------------------------------------
            // | BTCLR  |  BT1    |  BT2    |   BT3   |   BT4   |   BT5   |                  |      |      |       |      |       |       |
            // | EXTPWR | RGB_HUD | RGB_HUI | RGB_SAD | RGB_SAI | RGB_EFF |                  |      |      |       |      |       |       |
            // |        | RGB_BRD | RGB_BRI |         |         |         |                  |      |      |       |      |       |       |
            // |        |         |         |         |         |         | RGB_TOG | |      |      |      |       |      |       |       |
            //                    |         |         |         |         |         | |      |      |      |       |      |

            display-name = "adjust";
            bindings = <
&bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &kp LC(LS(LA(F14)))  &none  &none  &none  &none       &kp KP_NUMLOCK
&bt BT_CLR_ALL  &to 1         &to 0         &to 2         &to 6         &to 3                           &none                &none  &none  &none  &none       &kp LS(LA(LC(F12)))
&none           &none         &none         &out OUT_BLE  &out OUT_TOG  &out OUT_USB                    &none                &none  &none  &none  &none       &none
&bootloader     &sys_reset    &none         &none         &none         &none         &trans    &trans  &none                &none  &none  &none  &sys_reset  &bootloader
                              &none         &none         &none         &none         &none     &none   &none                &none  &none  &none
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_UP C_VOL_DN>,
                <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };

        old_sym_layer_us_layout {
            display-name = "old_symbolfunction";
            bindings = <
&trans  &trans       &trans          &kp LESS_THAN         &kp GREATER_THAN       &trans                              &kp KP_NUMLOCK   &trans           &kp KP_DIVIDE    &kp KP_MULTIPLY  &trans        &trans
&trans  &kp AT_SIGN  &kp PIPE        &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp BACKSLASH                       &kp KP_DIVIDE    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MINUS  &trans
&trans  &kp HASH     &macro_en_dash  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SINGLE_QUOTE                    &kp KP_MULTIPLY  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS   &none
&trans  &kp PERCENT  &kp CARET       &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp TILDE         &trans    &trans  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans        &trans
                     &trans          &trans                &trans                 &trans            &trans    &trans  &trans           &trans           &trans           &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };

        old_symbol_layer {
            display-name = "old_symbolfunction";
            bindings = <
&trans     &kp F1     &kp F2     &kp F3    &kp F4    &kp F5                       &kp F6     &kp F7    &kp F8     &kp F9     &kp F10   &kp F11
&kp GRAVE  &kp N1     &kp N2     &kp N3    &kp N4    &kp N5                       &kp N6     &kp N7    &kp N8     &kp N9     &kp N0    &kp F12
&trans     &kp EXCL   &kp AT     &kp HASH  &kp DLLR  &kp PRCNT                    &kp CARET  &kp AMPS  &kp ASTRK  &kp LPAR   &kp RPAR  &kp PIPE
&trans     &kp EQUAL  &kp MINUS  &kp PLUS  &kp LBRC  &kp RBRC   &trans    &trans  &kp LBKT   &kp RBKT  &kp SEMI   &kp COLON  &kp BSLH  &trans
                      &trans     &trans    &trans    &trans     &trans    &trans  &trans     &trans    &trans     &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };
    };
};
